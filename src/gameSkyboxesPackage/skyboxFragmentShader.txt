#version 400
//This is the fragment shader which takes the color values of several vertexes and blends accordingly
in vec3 pass_placementTexture;
out vec4 out_Color;

uniform samplerCube cubeMap;
uniform samplerCube cubeMap2;
uniform float cubeMapBlender;
//This stores the color of the fog
uniform vec3 fogColor;
//Assign the range to which fog should be visible
const float fogLimitBottom = 0.0;
const float fogLimitTop = 30.0;

void main(void){
	//Sample both cube map textures
	vec4 t1 = texture(cubeMap, pass_placementTexture);
	vec4 t2 = texture(cubeMap2, pass_placementTexture);
	//Blend these values for the fog
    vec4 out_FogColor = mix(t1, t2, cubeMapBlender);
    //Calculate the fog range
    float fogRange = (pass_placementTexture.y - fogLimitBottom) / (fogLimitTop - fogLimitBottom);
    fogRange = clamp(fogRange, 0.0, 1.0);
    //Output the fog mixed over the fog range
    out_Color = mix(vec4(fogColor, 1.0), out_FogColor, fogRange);
}